plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.9.6"
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'org.gradle.test-retry' version '1.0.0'
}

repositories {
    mavenCentral()
}

def selenideVersion = "6.3.5",
    junitVersion = "5.8.2",
    slfVersion = "1.7.36",
    ownerVersion = "1.0.4",
    fakerVersion = "1.0.2",
    allureVersion = "2.17.3"


allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    implementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.github.javafaker:javafaker:$fakerVersion",
            "org.slf4j:slf4j-simple:$slfVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:4.5.1",
            'org.postgresql:postgresql:42.1.4',
            'org.springframework:spring-jdbc:5.3.20',
            "org.aeonbits.owner:owner:$ownerVersion",
            'io.cucumber:cucumber-java:7.8.0',
            'io.cucumber:cucumber-junit:7.8.0',
            'org.assertj:assertj-core:3.22.0'
    )
}

//test {
//    useJUnitPlatform()
//    retry {
//        failOnPassedAfterRetry = true
//        maxFailures = 10
//        maxRetries = 1
//    }
//}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}